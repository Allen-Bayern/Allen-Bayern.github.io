/***/

//! moment.js locale configuration

// Monday is the first day of the week.

// Sunday is the first day of the week.

// Monday - Friday

// `Array.prototype.reduce` method

// https://tc39.es/ecma262/#sec-array.prototype.reduce

// `Array.prototype.reduceRight` method

// https://tc39.es/ecma262/#sec-array.prototype.reduceright

// Words with masculine grammatical gender: mois, trimestre, jour

// Words with feminine grammatical gender: semaine

// Hindi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.

// Gujarati notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.

/*jshint -W100*/

// There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.

// Punjabi notation for meridiems are quite fuzzy in practice. While there exists

// a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

// the ordinal 'er' only applies to day of the month

// Sunday is the first day of the week

// special case for zero

//Different grammatical cases

// Nominativ

/* , initialValue */

// yes, three characters difference

// Saturday is the first day of the week.

// Thanks to Joris Röling : https://github.com/jjupiter

// Maandag is die eerste dag van die week.

// NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.

// Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.

// a few seconds / in a few seconds / a few seconds ago

// 9 seconds / in 9 seconds / 9 seconds ago

// a minute / in a minute / a minute ago

// 9 minutes / in 9 minutes / 9 minutes ago

// an hour / in an hour / an hour ago

// 9 hours / in 9 hours / 9 hours ago

// a day / in a day / a day ago

// 9 days / in 9 days / 9 days ago

// a month / in a month / a month ago

// 9 months / in 9 months / 9 months ago

// a year / in a year / a year ago

// 9 years / in 9 years / 9 years ago

// refer http://ta.wikipedia.org/s/1er1

// வைகறை

// காலை

// நண்பகல்

// எற்பாடு

// மாலை

/**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */

// Negative Number --> always true

// Only 1 digit

// 2 digits

// 3 or 4 digits --> recursively check first digit

// Anything larger than 4 digits: recursively check first n-3 digits

// Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule

// '中午'

// GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效

/* WEBPACK VAR INJECTION */

//ne 'diurno', ĉar estas uzita por proksimumo

// goude merenn | a-raok merenn

// if there is a day number before 'MMMM'

// time formats are the same as en-gb

// traditional ordinal numbers above 31 are not commonly used in colloquial Welsh

// 1af to 10fed

// not 30ain, 70ain or 90ain

// http://new.gramota.ru/spravka/rules/139-prop : § 103

// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637

// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753

// по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?

// полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки

// копия предыдущего

// полные названия с падежами

// Выражение, которое соответствует только сокращённым формам

// TODO: Return 'e' when day of month > 1. Move this case inside

// block for masculine words below.

// See https://github.com/moment/moment/issues/3375

// eslint-disable-next-line no-useless-call -- required for testing

// the ordinal 'वेर' only applies to day of the month

// M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

/**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */

// E.g. "21 minūte", "3 minūtes".

// E.g. "21 minūtes" as in "pēc 21 minūtes".

// E.g. "3 minūtēm" as in "pēc 3 minūtēm".

//! moment.js

//! version : 2.29.4

//! authors : Tim Wood, Iskren Chernev, Moment.js contributors

//! license : MIT

//! momentjs.com

// This is done to register the method called with moment()

// without creating circular dependencies.

// IE8 will treat undefined and null as object if it wasn't for

// input != null

// We need to deep clone this object.

// Plugins that add properties should also add the key here (null value),

// so we can properly clone ourselves.

// Moment prototype object

// Prevent infinite loop in case updateOffset creates new moment

// objects.

// Remove trailing comma and space

// Lenient ordinal parsing accepts just a number in addition to

// number + (possibly) stuff coming from _dayOfMonthOrdinalParse.

// TODO: Remove "ordinalParse" fallback in next major release.

// make sure changes to properties don't modify parent config

// token:    'M'

// padded:   ['MM', 2]

// ordinal:  'Mo'

// callback: function () { this.month() + 1 }

// format date using native date object

// -0 -> 0

// MOMENTS

//       0 - 9

//      00 - 99

//     000 - 999

//    0000 - 9999

// -999999 - 999999

//       0 - 99

//     999 - 9999

//   99999 - 999999

//       0 - 999

//       0 - 9999

//       0 - inf

//    -inf - inf

// +00:00 -00:00 +0000 -0000 or Z

// +00 -00 +00:00 -00:00 +0000 -0000 or Z

// 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.

// includes scottish gaelic two word and hyphenated months

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript

// I know

// FORMATTING

// ALIASES

// PRIORITY

// PARSING

// if we didn't find a month name, mark the date as invalid.

// LOCALES

// this is not used

// TODO: add sorting

// Sorting makes sure if one month (or abbr) is a prefix of another

// see sorting in computeMonthsParse

// make the regex if we don't have it already

// test the regex

// No op

// TODO: Another silent failure?

// Sorting makes sure if one month (or abbr) is a prefix of another it

// will match the longer piece.

// HELPERS

// HOOKS

// PRIORITIES

// can't just apply() to create a date:

// https://stackoverflow.com/q/181348

// the date constructor remaps years 0-99 to 1900-1999

// preserve leap years using a full 400 year cycle, then reset

// the Date.UTC function remaps years 0-99 to 1900-1999

// start-of-first-week - start-of-year

// first-week day -- which january is always in the first week (4 for iso, 1 for other)

// first-week day local weekday -- which local weekday is fwd

// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday

// if we didn't get a weekday name, mark the date as invalid

// behaves the same as moment#day except

// as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)

// as a setter, sunday should belong to the previous week.

// Sorting makes sure if one weekday (or abbr) is a prefix of another it

// IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays

// Using charAt should be more compatible.

// Setting the hour should keep the time, because the user explicitly

// specified which hour they want. So trying to maintain the same hour (in

// a new timezone) makes sense. Adding/subtracting hours does not follow

// this rule.

// internal storage for locale config files

// pick the locale from the array

// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each

// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root

//the next array item is better than a shallower substring of this one

// Prevent names that look like filesystem paths, i.e contain '/' or '\'

// TODO: Find a better way to register and load all the locales in Node

// mark as not found to avoid repeating expensive file require call causing high CPU

// when trying to find en-US, en_US, en-us for every format call

// null means not found

// This function will load locale and then set the global locale.  If

// no arguments are passed in, it will simply return the current global

// locale key.

// moment.duration._locale = moment._locale = data;

//warn user if arguments are passed but the locale could not be set

// backwards compat for now: also set the locale

// make sure we set the locale AFTER all child locales have been

// created, so we won't end up with the child locale set.

// useful for testing

// Update existing child locale in-place to avoid memory-leaks

// MERGE

// updateLocale is called for creating a new locale

// Set abbr so it will have a name (getters return

// undefined otherwise).

// pass null for config to unupdate, useful for tests

// returns locale data

//short-circuit everything else

// iso 8601 regex

// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)

// iso time formats and regexes

// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3

// date from iso format

// match[2] should be 'T' or space

// Remove comments and folding whitespace and replace multiple-spaces with a single space

// TODO: Replace the vanilla JS Date object with an independent day-of-week check.

// the only allowed military tz is Z

// date and time from ref 2822 format

// date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict

// Final attempt, use Input Fallback

// Pick the first defined of two or three arguments.

// hooks is actually the exported moment object

// convert an array to a date.

// the array should mirror the parameters below

// note: all values past the year are optional and will default to the lowest possible value.

// [year, month, day , hour, minute, second, millisecond]

//compute day of the year from weeks and weekdays

//if the day of the year is set, figure out what it is

// Default to current date.

// * if no year, month, day of month are given, default to today

// * if day of month is given, default month and year

// * if month is given, default only year

// * if year is given, don't default anything

// Zero out whatever was not defaulted, including time

// Check for 24:00:00.000

// Apply timezone offset from input. The actual utcOffset can be changed

// with parseZone.

// check for mismatching day of week

// TODO: We need to take the current isoWeekYear, but that depends on

// how we interpret now (local, utc, fixed offset). So create

// a now version of current config (take local/utc/offset flags, and

// create now).

// Default to current week.

// weekday -- low day numbers are considered next week

// local weekday -- counting starts from beginning of week

// default to beginning of week

// constant that refers to the ISO standard

// date from string and format string

// TODO: Move this to another part of the creation flow to prevent circular deps

// This array is used to make a Date, either with `new Date` or `Date.UTC`

// don't parse if it's not a known token

// add remaining unparsed input length to the string

// clear _12h flag if hour is <= 12

// handle meridiem

// handle era

// nothing to do

// Fallback

// this is not supposed to happen

// date from string and array of format strings

// if there is any input that was not parsed add a penalty for that format

//or tokens

// Adding is smart enough around DST

// from milliseconds

// object construction must be done this way.

// https://github.com/moment/moment/issues/1423

// constant that refers to the RFC 2822 form

// Pick a moment m from moments so that m[fn](other) is true for all

// other. This relies on the function fn to be transitive.

//

// moments should either be an array of moment objects or an array, whose

// first element is an array of moment objects.

// TODO: Use [].sort instead?

// only allow non-integers for smallest unit

// representation for dateAddRemove

// 1000

// 1000 * 60

//using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978

// Because of dateAddRemove treats 24 hours as different from a

// day when working around DST, we need to store them separately

// It is impossible to translate months into days without knowing

// which months you are are talking about, so we have to store

// it separately.

// compare two arrays, return the number of differences

// timezone chunker

// '+10:00' > ['10',  '00']

// '-1530'  > ['-15', '30']

// Return a moment from input, that is local/utc/zone equivalent to model.

// Use low-level api, because this fn is low-level api.

// On Firefox.24 Date#getTimezoneOffset returns a floating point.

// https://github.com/moment/moment/pull/1871

// This function will be called whenever a moment is mutated.

// It is intended to keep the offset in sync with the timezone.

// keepLocalTime = true means only change the timezone, without

// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->

// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset

// +0200, so we adjust the time as needed, to be valid.

// Keeping the time actually adds/subtracts (one hour)

// from the actual represented time. That is why we call updateOffset

// a second time. In case it wants us to change the offset again

// _changeInProgress == true case, then we have to adjust, because

// there is no such time in the given timezone.

// ASP.NET json date format regex

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html

// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere

// and further modified to allow for strings containing both week and day

// matching against regexp is expensive, do it on demand

// checks for null or undefined

// We'd normally use ~~inp for this, but unfortunately it also

// converts floats to ints.

// inp may be undefined, so careful calling replace on it.

// apply sign while we're at it

// TODO: remove 'name' arg after deprecation is removed

//invert the arguments, but complain about it

// type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined

// Support for single parameter, formats only overload to the calendar function

// We want to compare the start of today, vs this.

// Getting start-of-today depends on whether we're local/utc/offset or not.

// 1000 * 60 * 60

// 1000 * 60 * 60 * 24, negate dst

// 1000 * 60 * 60 * 24 * 7, negate dst

// end-of-month calculations work correct when the start month has more

// days than the end month.

// difference in months

// b is in (anchor - 1 month, anchor + 1 month)

// linear across the month

//check for negative zero, return zero if negative zero

// native implementation is ~50x faster, use it when we can

/**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */

// If passed a locale key, it will set the locale for this

// instance.  Otherwise, it will return the locale configuration

// variables for this instance.

// actual modulo - handles negative numbers (for dates before 1970):

// Date.UTC remaps years 0-99 to 1900-1999

// new Date(NaN).toJSON() === null

// truncate time

// ()

// (5)

// (fmt, 5)

// (fmt)

// (true)

// (true, 5)

// (true, fmt, 5)

// (true, fmt)

// Side effect imports

// supports only 2.0-style add(1, 's') or add(duration)

// supports only 2.0-style subtract(1, 's') or subtract(duration)

// if we have a mix of positive and negative values, bubble down first

// check: https://github.com/moment/moment/issues/2166

// The following code bubbles up values, see the tests for

// examples of what that means.

// convert days to months

// 12 months -> 1 year

// 400 years have 146097 days (taking into account leap year rules)

// 400 years have 12 months === 4800

// the reverse of daysToMonths

// handle milliseconds separately because of floating point math errors (issue #1867)

// Math.floor prevents floating point math errors here

// TODO: Use this.as('ms')?

// a few seconds to seconds

// seconds to minute

// minutes to hour

// hours to day

// days to month/week

// weeks to month

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

// This function allows you to set the rounding function for relative time strings

// This function allows you to set a threshold for relative time strings

// for ISO strings we do not use the normal bubbling rules:

//  * milliseconds bubble up until they become hours

//  * days do not bubble at all

//  * months bubble up until they become years

// This is because there is no context-free conversion between hours and days

// (think of clock changes)

// and also not between days and months (28-31 days per month)

// this is the same as C#'s (Noda) and python (isodate)...

// but not other JS (goog.date)

// 3600 seconds -> 60 minutes -> 1 hour

// inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

// currently HTML5 input type only supports 24-hour formats

// <input type="datetime-local" />

// <input type="datetime-local" step="1" />

// <input type="datetime-local" step="0.001" />

// <input type="date" />

// <input type="time" />

// <input type="time" step="1" />

// <input type="time" step="0.001" />

// <input type="week" />

// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.

// This is currently too difficult (maybe even impossible) to add.
